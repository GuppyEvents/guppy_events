<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityRepository extends EntityRepository
{

    /**
     *
     * @param string $keyValue The community name key value
     * @return Community|null
     */
    public function getSeruventCommunity()
    {
        $seruvent = $this->getEntityManager()->getRepository('AppBundle:Community')->find(9999);
        return $seruvent;
    }


    /**
     *
     * @param string $keyValue The community name key value
     * @param string $orderBy 0 for name, 1 for date
     * @return Community|null
     */
    public function searchCommunityListWithEventCount($keyValue , $page=1, $orderBy=0, $pageSize=10)
    {
        // topluluğun etklinlik sayısı && kayıtlı üye sayısı dönülecek
        $em = $this->getEntityManager();

        $sql = 'SELECT community.registerDate, community.name, community.id, community.imageBase64, university.name as universityName, COUNT(community.id) as eventCount
                FROM AppBundle:Community community
                JOIN AppBundle:University university WITH university=community.university
                JOIN AppBundle:CommunityUser communityUser WITH communityUser.community=community.id
                JOIN AppBundle:Event event WITH event.communityUser=communityUser.id
                WHERE university.id = :universityId and community.isApproved = true and community.name LIKE :nameKeyValue
                GROUP By community.id
                ';

        if($orderBy == 0){
            $sql .= 'ORDER BY community.name ASC';
        } else if($orderBy == 1){
            $sql .= 'ORDER BY community.registerDate DESC';
        }
        $query = $em->createQuery(
            $sql
        )->setParameters(array(
            'universityId' => 5,
            'nameKeyValue' => '%'.$keyValue.'%'
        ));
        $query->setFirstResult($pageSize * ($page - 1));
        $query->setMaxResults( $pageSize );
        return $query->getResult();
    }


    /**
     *
     * @param int $communityId The community id value
     * @return int|null
     */
    public function findUserCountByCommunity($communityId)
    {

        $em = $this->getEntityManager();
        $roleState = $em->getRepository('AppBundle:CommunityUserRoleState')->findAcceptState();
        $query = $em->createQuery(
            'SELECT COUNT(community.id) as memberCount
                    FROM AppBundle:Community community
                    JOIN AppBundle:CommunityUser communityUser WITH communityUser.community=community.id
                    JOIN AppBundle:CommunityUserRoles communityUserRoles WITH communityUserRoles.communityUser=communityUser.id
                    WHERE communityUserRoles.state = :roleState and community.id = :communityId
                '
        )->setParameters(array(
            'communityId' => $communityId,
            'roleState' => $roleState
        ));

        return isset($query->getOneOrNullResult()['memberCount']) ? $query->getOneOrNullResult()['memberCount'] : 0;
    }


    /**
     *
     * @param string $keyValue The community name key value
     * @return Community|null
     */
    public function findCommunityListByName($keyValue , $page=1 ,$pageSize=10)
    {
        return $this->createQueryBuilder('community')
            ->join('community.university', 'university')
            ->where('community.name LIKE :nameKeyValue AND university.id = :universityId AND community.isApproved = true')
            ->setParameter('nameKeyValue', '%'.$keyValue.'%')
            ->setParameter('universityId', 5)
            ->orderBy('community.name', 'ASC')
            ->setFirstResult($pageSize * ($page - 1))
            ->setMaxResults( $pageSize )
            ->getQuery()
            ->getResult();
    }


    /**
     *
     * @param string $keyValue The community name key value
     * @return Community|null
     */
    public function findCommunityListByUniversity($page=1 ,$pageSize=24,$universityId=5)
    {
        return $this->createQueryBuilder('community')
            ->join('community.university', 'university')
            ->where('university.id = :universityId AND community.isApproved = true')
            ->setParameter('universityId', $universityId)
            ->orderBy('community.name', 'ASC')
            ->setFirstResult($pageSize * ($page - 1))
            ->setMaxResults( $pageSize )
            ->getQuery()
            ->getResult();
    }


    /**
     *
     * @param string $communityId The community id value
     * @return Community|null
     */
    public function findOnePublishCommunity($communityId)
    {
        return $this->createQueryBuilder('community')
            ->where('community.id= :communityId')
            ->andWhere('community.isApproved=true')
            ->andWhere('community.deleteDate is null')
            ->setParameter('communityId', $communityId)
            ->getQuery()
            ->getOneOrNullResult();
    }

}
