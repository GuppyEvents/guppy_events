<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Event;
use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{

    /**
     *
     * @param string $username The username
     * @return Event|null
     */
    public function findPublishEventsByCommunityId($communityId)
    {
        $statePublish = $this->getEntityManager()->getRepository('AppBundle:State')->findPublishState();
        return $this->createQueryBuilder('event')
            ->join('event.communityUser', 'communityUser')
            ->join('communityUser.community', 'community')
            ->join('event.state', 'state')
            ->where('community.id = :communityId')
            ->andWhere('state.id = :statePublish')
            ->orderBy('event.startDate', 'DESC')
            ->setParameter('communityId', intval($communityId))
            ->setParameter('statePublish', $statePublish)
            ->getQuery()
            ->getResult();
    }

    /**
     *
     * @param string $username The username
     * @return Event|null
     */
    public function findEventsByCommunityId($communityId)
    {
        return $this->createQueryBuilder('event')
            ->join('event.communityUser', 'communityUser')
            ->join('communityUser.community', 'community')
            ->where('community.id = :communityId')
            ->orderBy('event.startDate', 'DESC')
            ->setParameter('communityId', intval($communityId))
            ->getQuery()
            ->getResult();
    }


    /**
     *
     * @param array $communityIdList The community id list
     * @return Event|null
     */
    public function findEventsByCommunityIdList($communityIdList)
    {
        return $this->createQueryBuilder('event')
            ->join('event.communityUser', 'communityUser')
            ->innerJoin('communityUser.community', 'community')
            ->where('community.id IN (:communityIdList)')
            ->setParameter('communityIdList', $communityIdList)
            ->getQuery()
            ->getResult();
    }


    /**
     *
     * @param \DateTime $datetime The date
     * @return Event|null
     */
    public function findEventsByDate($firstDate , $lastDate)
    {
        return $this->createQueryBuilder('event')
            ->where('event.startDate BETWEEN :targetDate AND :targetNextDate')
            ->setParameter('targetDate', $firstDate)
            ->setParameter('targetNextDate', $lastDate)
            ->getQuery()
            ->getResult();
    }

    /**
     * $maxResult ile ilgili tarih için kaç tane etkinlik döneceği belirlenir
     * 
     * @param \DateTime $datetime The date
     * @return Event|null
     */
    public function findPublishEventsByDate($firstDate , $lastDate , $maxResult=null)
    {
        $statePublish = $this->getEntityManager()->getRepository('AppBundle:State')->findPublishState();
        $query = $this->createQueryBuilder('event')
            ->join('event.state', 'state')
            ->where('event.startDate BETWEEN :targetDate AND :targetNextDate')
            ->andWhere('state.id = :statePublish')
            ->setParameter('targetDate', $firstDate)
            ->setParameter('targetNextDate', $lastDate)
            ->setParameter('statePublish', $statePublish);

        if($maxResult){
            $query->setMaxResults($maxResult);
        }

        return $query->getQuery()->getResult();
    }


    /**
     *
     * @param string $keyValue The event title key value
     * @return Event|null
     */
    public function findEventListByName($keyValue , $page=1 , $pageSize=10)
    {
        /**
         * Etkinlikler public dönmektedir (Eğer kullanıcı login olmuş ise universite içindekiler de gelmelidir)
         */
        return $this->createQueryBuilder('event')
            ->where('event.title LIKE :titleKeyValue AND event.startDate > :now')
            ->setParameter('titleKeyValue', '%'.$keyValue.'%')
            ->setParameter('now', new \DateTime())
            ->orderBy('event.startDate', 'ASC')
            ->setFirstResult($pageSize * ($page - 1))
            ->setMaxResults( $pageSize )
            ->getQuery()
            ->getResult();
    }

}
