<?php

namespace AppBundle\Repository;

use AppBundle\Entity\CommunityUserRoles;
use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityUserRolesRepository extends EntityRepository
{

    /**
     * @param User $userId The user id
     * @return CommunityUserRoles|null
     */
    public function findCommunityAdminRoles($userId)
    {
        return $this->createQueryBuilder('communityUserRoles')
            ->join('communityUserRoles.communityUser', 'communityUser')
            ->join('communityUser.community', 'community')
            ->where('community.isApproved=true')
            ->andWhere('communityUserRoles.state=:stateId')
            ->andWhere('communityUserRoles.communityRole=:roleId')
            ->andWhere('communityUser.user=:userId')
            ->setParameter('stateId',1000)
            ->setParameter('roleId',100)
            ->setParameter('userId',$userId)
            ->getQuery()
            ->getResult();
    }


    /**
     * @param User $userId The user id
     * @return CommunityUserRoles|null
     */
    public function findCommunityMemberRoles($userId)
    {
        return $this->createQueryBuilder('communityUserRoles')
            ->join('communityUserRoles.communityUser', 'communityUser')
            ->join('communityUser.community', 'community')
            ->where('community.isApproved=true')
            ->andWhere('communityUserRoles.state=:stateId')
            ->andWhere('communityUserRoles.communityRole=:roleId')
            ->andWhere('communityUserRoles.communityRole!=:adminRoleId')
            ->andWhere('communityUser.user=:userId')
            ->setParameter('stateId',1000)
            ->setParameter('roleId',200)
            ->setParameter('adminRoleId',100)
            ->setParameter('userId',$userId)
            ->getQuery()
            ->getResult();
    }


    /**
     * @param User $userId The user id
     * @return CommunityUserRoles|null
     */
    public function findCommunityAppyRoles($userId)
    {
        return $this->createQueryBuilder('communityUserRoles')
            ->join('communityUserRoles.communityUser', 'communityUser')
            ->join('communityUser.community', 'community')
            ->where('community.isApproved=true')
            ->andWhere('communityUserRoles.state=:stateId')
            ->andWhere('communityUser.user=:userId')
            ->setParameter('stateId',3000)
            ->setParameter('userId',$userId)
            ->getQuery()
            ->getResult();
    }

}
